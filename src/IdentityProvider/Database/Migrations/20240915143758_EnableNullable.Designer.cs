// <auto-generated />
using System;
using IdentityProvider.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IdentityProvider.Database.Migrations
{
    [DbContext(typeof(IdentityDbContext))]
    [Migration("20240915143758_EnableNullable")]
    partial class EnableNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("IdentityProvider.Entites.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityCode")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SecurityCodeExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Subject")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f5f4b3b3-3b6d-4b1e-8b3d-3b6d4b1e8b3d"),
                            Active = true,
                            ConcurrencyStamp = "71ca5ba2-1d2f-489f-abce-9c580dbc96c0",
                            Email = "chicuong123@gmail.com",
                            Password = "AQAAAAIAAYagAAAAEE0MNwa4ESudTiuuwT6MaA7tooDw2yOBw8X4TYv5D6N3/4R4LL6fTJXTVtL/m1IRhQ==",
                            SecurityCodeExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Subject = "e6246359-1371-48af-800f-45982491163a",
                            UserName = "cuong"
                        },
                        new
                        {
                            Id = new Guid("f5f4b3b3-3b6d-4b1e-4a3d-3b6d4b1e2a6a"),
                            Active = true,
                            ConcurrencyStamp = "e932c391-7c9b-411b-8c90-bcb128ed2839",
                            Email = "tandung@gmail.com",
                            Password = "AQAAAAIAAYagAAAAECOtO9SY5lL3SgD5smsFNrebBiLh3PVm7EHwJFIZekfOlVsS0M0afRUAdrY9HfLT5Q==",
                            SecurityCodeExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Subject = "a2ba2c81-486f-46e0-aa42-3d3ee8665f53",
                            UserName = "dung"
                        });
                });

            modelBuilder.Entity("IdentityProvider.Entites.UserClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c197df6e-0f69-4658-a71d-677841c74fa8"),
                            ConcurrencyStamp = "fbfdfc40-e25c-40aa-b92c-4a7c56e71e0d",
                            Type = "given_name",
                            UserId = new Guid("f5f4b3b3-3b6d-4b1e-8b3d-3b6d4b1e8b3d"),
                            Value = "Cường"
                        },
                        new
                        {
                            Id = new Guid("72b3a615-b441-4844-8fd9-ec555bb4071c"),
                            ConcurrencyStamp = "00536d5b-1ea6-435a-a96d-906a367c5bee",
                            Type = "family_name",
                            UserId = new Guid("f5f4b3b3-3b6d-4b1e-8b3d-3b6d4b1e8b3d"),
                            Value = "Nguyễn"
                        },
                        new
                        {
                            Id = new Guid("9cf2296b-687a-481a-98a5-37847b9a176f"),
                            ConcurrencyStamp = "2bdae41d-0e04-4408-bd91-aaa9039cbb3d",
                            Type = "role",
                            UserId = new Guid("f5f4b3b3-3b6d-4b1e-8b3d-3b6d4b1e8b3d"),
                            Value = "Admin"
                        },
                        new
                        {
                            Id = new Guid("8766fb34-cd09-43a0-b2f6-472910eb16f4"),
                            ConcurrencyStamp = "dda963e9-6108-4c27-b1c7-0a76683d762d",
                            Type = "country",
                            UserId = new Guid("f5f4b3b3-3b6d-4b1e-8b3d-3b6d4b1e8b3d"),
                            Value = "cn"
                        },
                        new
                        {
                            Id = new Guid("b9a7a656-322b-4940-8a77-374cbc18e147"),
                            ConcurrencyStamp = "f121db14-8247-49aa-a100-918fa321b8aa",
                            Type = "given_name",
                            UserId = new Guid("f5f4b3b3-3b6d-4b1e-4a3d-3b6d4b1e2a6a"),
                            Value = "Dũng"
                        },
                        new
                        {
                            Id = new Guid("78b03b17-60c2-4973-80e6-1e0960dd427d"),
                            ConcurrencyStamp = "482eb0e8-a011-4910-9c21-9b8933f4b6bf",
                            Type = "family_name",
                            UserId = new Guid("f5f4b3b3-3b6d-4b1e-4a3d-3b6d4b1e2a6a"),
                            Value = "Tấn"
                        },
                        new
                        {
                            Id = new Guid("34ec654d-779a-46ba-bd02-b454932e358b"),
                            ConcurrencyStamp = "8b8355b6-97c5-40f7-989b-17c84141dad2",
                            Type = "role",
                            UserId = new Guid("f5f4b3b3-3b6d-4b1e-4a3d-3b6d4b1e2a6a"),
                            Value = "Customer"
                        },
                        new
                        {
                            Id = new Guid("d3f75946-a119-4eb1-8a7b-25bc538e07f3"),
                            ConcurrencyStamp = "db25a234-7495-4755-aa1a-3dfe9e39efee",
                            Type = "country",
                            UserId = new Guid("f5f4b3b3-3b6d-4b1e-4a3d-3b6d4b1e2a6a"),
                            Value = "vn"
                        });
                });

            modelBuilder.Entity("IdentityProvider.Entites.UserLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderIdentityKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("IdentityProvider.Entites.UserClaim", b =>
                {
                    b.HasOne("IdentityProvider.Entites.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdentityProvider.Entites.UserLogin", b =>
                {
                    b.HasOne("IdentityProvider.Entites.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdentityProvider.Entites.User", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");
                });
#pragma warning restore 612, 618
        }
    }
}
