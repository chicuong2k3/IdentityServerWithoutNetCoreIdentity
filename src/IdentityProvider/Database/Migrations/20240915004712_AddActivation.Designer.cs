// <auto-generated />
using System;
using IdentityProvider.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IdentityProvider.Database.Migrations
{
    [DbContext(typeof(IdentityDbContext))]
    [Migration("20240915004712_AddActivation")]
    partial class AddActivation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("IdentityProvider.Entites.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityCode")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SecurityCodeExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Subject")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f5f4b3b3-3b6d-4b1e-8b3d-3b6d4b1e8b3d"),
                            Active = true,
                            ConcurrencyStamp = "81506e71-db50-48f6-9d5d-6b124f6e6383",
                            Email = "chicuong123@gmail.com",
                            Password = "AQAAAAIAAYagAAAAEColUQRA2h+zCDiWeVmmpm4UcUN4NodKVqwfcRS0jkMMF/nAdvmDRVUPKO9iQzhIpA==",
                            SecurityCodeExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Subject = "de1f108f-b527-43bc-b51b-6421ee24bab3",
                            UserName = "cuong"
                        },
                        new
                        {
                            Id = new Guid("f5f4b3b3-3b6d-4b1e-4a3d-3b6d4b1e2a6a"),
                            Active = true,
                            ConcurrencyStamp = "52e2fbbc-4aa9-4421-9851-8aaf8622053f",
                            Email = "tandung@gmail.com",
                            Password = "AQAAAAIAAYagAAAAENGIcCUHaEfvEekxwNSYEk+srUBQjJAKVJT3zrcrSB5PUa4T/7NxpcHW00uAWBsQPA==",
                            SecurityCodeExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Subject = "387926a3-9aeb-4037-84fb-924f4e9c7097",
                            UserName = "dung"
                        });
                });

            modelBuilder.Entity("IdentityProvider.Entites.UserClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c4544191-baa1-4fe5-894c-19867978b062"),
                            ConcurrencyStamp = "7e54f7f1-b5d2-474c-a28f-039b06a3ab69",
                            Type = "given_name",
                            UserId = new Guid("f5f4b3b3-3b6d-4b1e-8b3d-3b6d4b1e8b3d"),
                            Value = "Cường"
                        },
                        new
                        {
                            Id = new Guid("0d66cdf2-6bb1-4745-9626-e28383035444"),
                            ConcurrencyStamp = "1ee6f2c5-2b20-413e-83f0-5114d52ba6df",
                            Type = "family_name",
                            UserId = new Guid("f5f4b3b3-3b6d-4b1e-8b3d-3b6d4b1e8b3d"),
                            Value = "Nguyễn"
                        },
                        new
                        {
                            Id = new Guid("f568430c-7fd0-4afc-a8ab-21d7468f0f0b"),
                            ConcurrencyStamp = "8d731785-41ef-45c8-bc7a-bfa6dbb8053a",
                            Type = "role",
                            UserId = new Guid("f5f4b3b3-3b6d-4b1e-8b3d-3b6d4b1e8b3d"),
                            Value = "Admin"
                        },
                        new
                        {
                            Id = new Guid("a5441b4d-ac86-470e-8cd4-5f027b9437c0"),
                            ConcurrencyStamp = "bdb2817d-6b84-443a-bac6-b4963ab091db",
                            Type = "country",
                            UserId = new Guid("f5f4b3b3-3b6d-4b1e-8b3d-3b6d4b1e8b3d"),
                            Value = "cn"
                        },
                        new
                        {
                            Id = new Guid("40238184-4110-416a-84d6-306b45225ea7"),
                            ConcurrencyStamp = "60948b31-fa41-4be6-ad47-dad6cedf40dd",
                            Type = "given_name",
                            UserId = new Guid("f5f4b3b3-3b6d-4b1e-4a3d-3b6d4b1e2a6a"),
                            Value = "Dũng"
                        },
                        new
                        {
                            Id = new Guid("aa20587a-2403-4e40-ba5a-5399aeb2e9d1"),
                            ConcurrencyStamp = "ebcba1a5-5820-4057-aa9b-33782419089f",
                            Type = "family_name",
                            UserId = new Guid("f5f4b3b3-3b6d-4b1e-4a3d-3b6d4b1e2a6a"),
                            Value = "Tấn"
                        },
                        new
                        {
                            Id = new Guid("535f4609-7c41-4e0a-9433-25e14fe8581d"),
                            ConcurrencyStamp = "80907a9a-f462-44c8-96dd-f7c29d7727fc",
                            Type = "role",
                            UserId = new Guid("f5f4b3b3-3b6d-4b1e-4a3d-3b6d4b1e2a6a"),
                            Value = "Customer"
                        },
                        new
                        {
                            Id = new Guid("73750a07-1534-4462-803b-08b4eb19cbaa"),
                            ConcurrencyStamp = "33be7372-fb81-40d0-800f-49278cbbe9d6",
                            Type = "country",
                            UserId = new Guid("f5f4b3b3-3b6d-4b1e-4a3d-3b6d4b1e2a6a"),
                            Value = "vn"
                        });
                });

            modelBuilder.Entity("IdentityProvider.Entites.UserClaim", b =>
                {
                    b.HasOne("IdentityProvider.Entites.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdentityProvider.Entites.User", b =>
                {
                    b.Navigation("Claims");
                });
#pragma warning restore 612, 618
        }
    }
}
