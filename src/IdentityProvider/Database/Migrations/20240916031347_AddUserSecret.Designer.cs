// <auto-generated />
using System;
using IdentityProvider.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IdentityProvider.Database.Migrations
{
    [DbContext(typeof(IdentityDbContext))]
    [Migration("20240916031347_AddUserSecret")]
    partial class AddUserSecret
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("IdentityProvider.Entites.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityCode")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SecurityCodeExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Subject")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f5f4b3b3-3b6d-4b1e-8b3d-3b6d4b1e8b3d"),
                            Active = true,
                            ConcurrencyStamp = "9da467cc-22d6-45bd-854c-8dfe3d4741cc",
                            Email = "chicuong123@gmail.com",
                            Password = "AQAAAAIAAYagAAAAEBR4zbtM8+ufigRscKBIm0Sybqj/+VxPmeAyBVhdHjsS3pHs+rPrx/8REBSh15DaBQ==",
                            SecurityCodeExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Subject = "823e4276-e05a-4540-b61d-f69c927c6aae",
                            UserName = "cuong"
                        },
                        new
                        {
                            Id = new Guid("f5f4b3b3-3b6d-4b1e-4a3d-3b6d4b1e2a6a"),
                            Active = true,
                            ConcurrencyStamp = "7980d396-2c5a-482a-9e73-03e752ffab1d",
                            Email = "tandung@gmail.com",
                            Password = "AQAAAAIAAYagAAAAEPnu03M2TC6log3ArM6kDMS/8mRn2U0wLlz7kuctiweQ5hA4alBNV5VfkXhjyjY0YA==",
                            SecurityCodeExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Subject = "ebaa3858-a1f1-4a25-bfd6-4b68c1fc3532",
                            UserName = "dung"
                        });
                });

            modelBuilder.Entity("IdentityProvider.Entites.UserClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e81a90f1-6a9a-472b-b5fa-a7bc8207b745"),
                            ConcurrencyStamp = "70361225-de43-4672-b591-c4fd28f3a403",
                            Type = "given_name",
                            UserId = new Guid("f5f4b3b3-3b6d-4b1e-8b3d-3b6d4b1e8b3d"),
                            Value = "Cường"
                        },
                        new
                        {
                            Id = new Guid("d55f7869-b8fc-4580-8973-15baa2902e11"),
                            ConcurrencyStamp = "c01e2f4b-6567-40cd-804a-5c0540eb1582",
                            Type = "family_name",
                            UserId = new Guid("f5f4b3b3-3b6d-4b1e-8b3d-3b6d4b1e8b3d"),
                            Value = "Nguyễn"
                        },
                        new
                        {
                            Id = new Guid("e8334b5f-684d-474e-aaa2-55586cfa6d99"),
                            ConcurrencyStamp = "3fb8bd29-9877-44af-9374-fd3713541e23",
                            Type = "role",
                            UserId = new Guid("f5f4b3b3-3b6d-4b1e-8b3d-3b6d4b1e8b3d"),
                            Value = "Admin"
                        },
                        new
                        {
                            Id = new Guid("260e277c-a44c-4762-a0da-660e5138ea70"),
                            ConcurrencyStamp = "91fc7bb8-07eb-4fa9-9f0a-96758540cd39",
                            Type = "country",
                            UserId = new Guid("f5f4b3b3-3b6d-4b1e-8b3d-3b6d4b1e8b3d"),
                            Value = "cn"
                        },
                        new
                        {
                            Id = new Guid("129e2349-4c76-4527-88bc-f0a53c25329e"),
                            ConcurrencyStamp = "d6c383e2-79cf-4cec-964c-6bbaf571bed2",
                            Type = "given_name",
                            UserId = new Guid("f5f4b3b3-3b6d-4b1e-4a3d-3b6d4b1e2a6a"),
                            Value = "Dũng"
                        },
                        new
                        {
                            Id = new Guid("6c7ce8fa-7502-4a94-aae6-600b32e22e1f"),
                            ConcurrencyStamp = "3aae3036-57d9-4fcc-b7c4-9ce213460308",
                            Type = "family_name",
                            UserId = new Guid("f5f4b3b3-3b6d-4b1e-4a3d-3b6d4b1e2a6a"),
                            Value = "Tấn"
                        },
                        new
                        {
                            Id = new Guid("1af44c41-ec2c-4b54-a472-b4f04939254e"),
                            ConcurrencyStamp = "570c6656-8520-4a43-9c41-a22476dc2a06",
                            Type = "role",
                            UserId = new Guid("f5f4b3b3-3b6d-4b1e-4a3d-3b6d4b1e2a6a"),
                            Value = "Customer"
                        },
                        new
                        {
                            Id = new Guid("3fb7cb2d-0e29-4077-a8e5-050e29138dcf"),
                            ConcurrencyStamp = "44e548e4-afcc-4e82-9267-c2a876ad4926",
                            Type = "country",
                            UserId = new Guid("f5f4b3b3-3b6d-4b1e-4a3d-3b6d4b1e2a6a"),
                            Value = "vn"
                        });
                });

            modelBuilder.Entity("IdentityProvider.Entites.UserLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderIdentityKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("IdentityProvider.Entites.UserSecret", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserSecrets");
                });

            modelBuilder.Entity("IdentityProvider.Entites.UserClaim", b =>
                {
                    b.HasOne("IdentityProvider.Entites.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdentityProvider.Entites.UserLogin", b =>
                {
                    b.HasOne("IdentityProvider.Entites.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdentityProvider.Entites.UserSecret", b =>
                {
                    b.HasOne("IdentityProvider.Entites.User", "User")
                        .WithMany("UserSecrets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdentityProvider.Entites.User", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("UserSecrets");
                });
#pragma warning restore 612, 618
        }
    }
}
